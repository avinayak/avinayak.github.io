I"˜<p>I was experimenting with a lot of Genetic/Hill Climbing algorithms to generate Art. I started out by trying to approximate a Grayscale image with just lines of varying width and color intensity.</p>

<p>The genetic algorithm is roughly like this:</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="nl">Algorithm:</span> <span class="n">GA</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="err">Ï‡</span><span class="p">,</span> <span class="err">Âµ</span><span class="p">)</span>
    <span class="c1">// Initialise generation 0:
</span>
    <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">Pk</span> <span class="o">=</span> <span class="n">a</span> <span class="n">population</span> <span class="n">of</span> <span class="n">n</span> <span class="n">randomly</span><span class="o">-</span><span class="n">generated</span> <span class="n">individuals</span><span class="p">;</span>
    <span class="c1">// Evaluate Pk:
</span>
    <span class="n">Compute</span> <span class="n">fitness</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">each</span> <span class="n">i</span> <span class="err">âˆˆ</span> <span class="n">Pk</span><span class="p">;</span>
    <span class="k">do</span>
        <span class="p">{</span> 
        <span class="c1">// Create generation k + 1:
</span>
        <span class="c1">// 1. Copy:
</span>
        <span class="n">Select</span> <span class="p">(</span><span class="mi">1</span> <span class="err">âˆ’</span> <span class="err">Ï‡</span><span class="p">)</span> <span class="err">Ã—</span> <span class="n">n</span> <span class="n">members</span> <span class="n">of</span> <span class="n">Pk</span> <span class="n">and</span> <span class="n">insert</span> <span class="n">into</span> <span class="n">Pk</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
        <span class="c1">// 2. Crossover:
</span>
        <span class="n">Select</span> <span class="err">Ï‡</span> <span class="err">Ã—</span> <span class="n">n</span> <span class="n">members</span> <span class="n">of</span> <span class="n">Pk</span><span class="p">;</span> <span class="n">pair</span> <span class="n">them</span> <span class="n">up</span><span class="p">;</span> <span class="n">produce</span> <span class="n">offspring</span><span class="p">;</span> 
        <span class="n">insert</span> <span class="n">the</span> <span class="n">offspring</span> <span class="n">into</span> <span class="n">Pk</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
        <span class="c1">// 3. Mutate:
</span>
        <span class="n">Select</span> <span class="err">Âµ</span> <span class="err">Ã—</span> <span class="n">n</span> <span class="n">members</span> <span class="n">of</span> <span class="n">Pk</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span> <span class="n">invert</span> <span class="n">a</span> <span class="n">randomly</span><span class="o">-</span><span class="n">selected</span> <span class="n">bit</span> <span class="n">in</span> <span class="n">each</span><span class="p">;</span>
        <span class="c1">// Evaluate Pk+1:
</span>
        <span class="n">Compute</span> <span class="n">fitness</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">each</span> <span class="n">i</span> <span class="err">âˆˆ</span> <span class="n">Pk</span><span class="p">;</span>
        <span class="c1">// Increment:
</span>
        <span class="n">k</span> <span class="o">=</span> <span class="n">k</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">while</span> <span class="n">fitness</span> <span class="n">of</span> <span class="n">fittest</span> <span class="n">individual</span> <span class="n">in</span> <span class="n">Pk</span> <span class="n">is</span> <span class="n">not</span> <span class="n">high</span> <span class="n">enough</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">the</span> <span class="n">fittest</span> <span class="n">individual</span> <span class="n">from</span> <span class="n">Pk</span><span class="p">;</span></code></pre></figure>

<p>The first image after several geneartions..</p>

<p><img src="/assets/images/GA1.png" alt="ga" /></p>

<p>I lost the original image I was trying to approximate.. but doesnâ€™t that look like a deer? ðŸ™„ I modified the algorithm several times to approximate my face. This is the original image..</p>

<p>FYI this is what I look like</p>

<p><img src="/assets/images/face.jpg" alt="ga" /></p>

<p><strong>First Attempt</strong>: Program too slow. Had to stop after 10 Hours.</p>

<p><img src="/assets/images/GA.png" alt="ga" /></p>

<p><strong>Second Attempt</strong>: Rewrote the program to use Numpy arrays and Bezier Curves instead on just Lines. Also now in Technicolor!</p>

<p><img src="/assets/images/error1.png" alt="ga" /></p>

<p><strong>Bugfixes &amp; Third Attempt</strong>: Atleast itâ€™s converging to something</p>

<p><img src="/assets/images/out.png" alt="ga" /></p>

<p>But I didnâ€™t look like this at all :/ . The problem here was that the fitness function was</p>

<p>$ \sum_{pixel=1}^{NPIXELS} abs(original[pixel] - Generated[pixel]) $</p>

<p>I tried squaring. squaring increases error distance. So fitter drawings would have a higher chance of being selected.</p>

<p>$ \sum_{pixel=1}^{NPIXELS} (original[pixel] - Generated[pixel])^2 $</p>

<p>and it worked (sort of. from an artistic point of view)!</p>

<p><img src="/assets/images/me.jpg" alt="ga" /></p>

<p>I used this code to generate a lot of images, of different shapes.</p>

<p><img src="/assets/images/star.jpg" alt="ga" /></p>

<p>My eventual plans were to create a bot which tweets these images. I even wrote a small program that gets a random Picassa image and bezierifies it. Unfortunately, <a href="https://twitter.com/primitivepic">someone else</a> has already done it. And itâ€™s much better than mine. But I learned a lot doing this project.</p>
:ET